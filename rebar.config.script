% For each profile with a 'relx' configuration specified in the rebar.config
% file, generate three additional profiles. E.g., for the 'prod' profile:
%
% - The 'prod_minimal' excludes non-essential dependencies.
% - The 'prod_cross' profile includes ERTS and system libraries from the
%   "lib/erlang" directory (for cross compilation).
% - The 'prod_cross_minimal' does both.

Find =
    fun(K, L) ->
            lists:keyfind(K, 1, L)
    end,

Store =
    fun(K, V, L) ->
            lists:keystore(K, 1, L, {K, V})
    end,

Delete =
    fun(K, L) ->
            lists:keydelete(K, 1, L)
    end,

AddSuffix =
    fun(N, S) ->
            list_to_atom(atom_to_list(N) ++ [$_ | atom_to_list(S)])
    end,

{profiles, Profiles} = Find(profiles, CONFIG),

Profiles1 =
    lists:flatmap(
      fun({ProfName, ProfOpts} = Profile) ->
              case Find(relx, ProfOpts) of
                  {relx, RelxOpts} ->
                      InclErts = "lib/erlang",
                      InclLibs = "lib/erlang/lib",
                      ExclApps = case Find(exclude_apps, RelxOpts) of
                                     {exclude_apps, Apps} ->
                                         [sasl, recon | Apps];
                                     false ->
                                         [sasl, recon]
                                 end,
                      ProfName1 = AddSuffix(ProfName, cross),
                      ProfName2 = AddSuffix(ProfName, minimal),
                      ProfName3 = AddSuffix(ProfName1, minimal),
                      RelxOpts0 = Store(include_erts, InclErts, RelxOpts),
                      RelxOpts1 = Store(system_libs, InclLibs, RelxOpts0),
                      RelxOpts2 = Store(exclude_apps, ExclApps, RelxOpts),
                      RelxOpts3 = Store(exclude_apps, ExclApps, RelxOpts1),
                      ProfOpts1 = Store(relx, RelxOpts1, ProfOpts),
                      ProfOpts2 = Store(relx, RelxOpts2, ProfOpts),
                      ProfOpts3 = Store(relx, RelxOpts3, ProfOpts),
                      [Profile,
                       {ProfName1, ProfOpts1},
                       {ProfName2, ProfOpts2},
                       {ProfName3, ProfOpts3}];
                  false ->
                      [Profile]
              end
      end, Profiles),

Config1 = Store(profiles, Profiles1, CONFIG),

% Remove the rebar.lock file and set SKIP_DEPS=true to skip dependency handling.

case os:getenv("SKIP_DEPS") of
    "true" ->
        SkipOpts = [deps, plugins],
        lists:foldl(fun(Opt, Acc) ->
                            Delete(Opt, 1, Acc)
                    end, Config1, SkipOpts);
    _ ->
        Config1
end.
