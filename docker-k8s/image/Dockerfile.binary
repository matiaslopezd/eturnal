FROM debian:bullseye-slim as prepare
# BUILD: define image build arguments
ARG VERSION=1.10.1
ARG TINI_VERSION=0.19.0
ARG LC_ALL=C
ARG DEBIAN_FRONTEND=noninteractive

RUN set -x && apt-get update \
    && apt-get install -y apt-transport-https apt-utils ca-certificates curl gcc libcap2-bin
# RUNTIME: install eturnal binary with installer
RUN ARCH=$(uname -m | sed -e 's/x86_64/x64/;s/aarch64/arm64/;s/armv7l/arm/;s/s390x/s390x/;s/ppc64le/ppc64le/') \
    && curl -O https://eturnal.net/download/linux/installer/eturnal-$VERSION-linux-$ARCH.run \
    && chmod +x eturnal-*.run \
    && ./eturnal-*.run \
    && rm -rf eturnal-*.run /opt/eturnal/etc/* /etc/eturnal.yml
# RUNTIME: create rootfs and copy eturnal into it
RUN mkdir -p /rootfs/opt/eturnal/log /rootfs/opt/eturnal/run /rootfs/opt/eturnal/tls \
    && cp -r /opt/eturnal /rootfs/opt
# RUNTIME: install runtime init
RUN ARCH=$(uname -m | sed -e 's/x86_64/amd64/;s/aarch64/arm64/;s/armv7l/arm/;s/s390x/s390x/;s/ppc64le/ppc64le/') \
    && curl -fL -o /rootfs/tini https://github.com/krallin/tini/releases/download/v$TINI_VERSION/tini-$ARCH \
    && chmod +x /rootfs/tini
# RUNTIME: copy libcap binaries and libraries
RUN gccMultiarch="$(gcc -print-multiarch)" \
    && mkdir -p  /rootfs/sbin /rootfs/lib/$gccMultiarch/ \
    && cp -r /sbin/capsh /sbin/getcap /sbin/getpcaps /sbin/setcap /rootfs/sbin \
    && cp -r /lib/$gccMultiarch/libcap*.so.* /rootfs/lib/$gccMultiarch/

FROM gcr.io/distroless/base-debian11 AS eturnal
# BUILD: copy eturnal
COPY --from=prepare /rootfs /
COPY --from=prepare --chown=9000:9000 /rootfs/opt /opt
COPY --from=busybox:stable-glibc /bin /bin
ARG HOME=/opt/eturnal

RUN set -x \
# RUNTIME: add runtime group and user
    && echo "eturnal:x:9000:eturnal" >> /etc/group \
    && echo "eturnal:x:9000:9000:eturnal,,,:$HOME:/sbin/nologin" >> /etc/passwd \
# RUNTIME: create symbolic links, entrypoint script and minimal configuration file
    && ln -s $HOME/bin/eturnalctl /usr/sbin/eturnalctl \
    && ln -s $HOME/bin/stun /usr/sbin/stun \
    && echo -e \
        '#!/bin/sh \
        \necho "-setcookie eturnal" >> $(find -name vm.args) \
        \nif [ "$STUN_SERVICE" != "false" ] \
        \nthen \
        \n  export ETURNAL_RELAY_IPV4_ADDR=${ETURNAL_RELAY_IPV4_ADDR-$(stun -4 $STUN_SERVICE)} \
        \n  export ETURNAL_RELAY_IPV6_ADDR=${ETURNAL_RELAY_IPV6_ADDR-$(stun -6 $STUN_SERVICE)} \
        \nfi \
        \nexec "$@"' > /usr/sbin/run.sh \
    && chmod +x /usr/sbin/* \
    && echo -e \
        "# A more detailed, commented example configuration can be found here: \
        \n# https://github.com/processone/eturnal/blob/master/config/eturnal.yml \
        \neturnal: \
        \n  log_dir: stdout \
        \n  modules: \
        \n    mod_log_stun: {}" > $HOME/etc/eturnal.yml \
# RUNTIME: set CAPS for binding to privileged ports and remove unnecessary binaries
    && setcap 'cap_net_bind_service=+ep' $(find $HOME -name beam.smp) \
    && rm -f /sbin/capsh /sbin/getcap /sbin/getpcaps /sbin/setcap

# remove libssl and openssl from distroless image
# as they are statically built within eturnal binary
RUN find -type f -name 'libcrypt*' -exec rm -rv {} + \
    && find -type d -name 'libcrypt*' -exec rm -rv {} + \
    && find -type f -name 'libssl*' -exec rm -rv {} + \
    && find -type d -name 'libssl*' -exec rm -rv {} + \
    && find -type f -name 'openssl*' -exec rm -rv {} + \
    && find -type d -name 'openssl*' -exec rm -rv {} +

FROM scratch AS runtime
# BUILD: copy eturnal
COPY --from=eturnal / /
ARG HOME=/opt/eturnal
# RUNTIME: define environment variables
ENV ERL_DIST_PORT=3470 \
    PIPE_DIR=$HOME/run/pipe/ \
    STUN_SERVICE="stun.conversations.im 3478"

# RUNTIME: define container runtime parameters
WORKDIR $HOME
USER eturnal
VOLUME ["$HOME"]
EXPOSE 3478 3478/udp
ENTRYPOINT ["/tini","--","run.sh"]
CMD ["eturnalctl", "foreground"]